'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/r7si72Hwqdw
 */
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dispatch, SetStateAction, useEffect, useState } from 'react';
import { ConversationMessage } from './ui/ConversationMessage';

export enum User {
  User = 'User',
  Assistant = 'Assistant',
}

export interface Message {
  id: number;
  user: User;
  text: string;
}

type Conversation = Message[];

export function Chatbot() {
  const [inputValue, setInputValue] = useState('');
  const [conversation, setConversation] = useState<Conversation>([
    {
      id: 1,
      user: User.Assistant,
      text: 'Hello, how can I help you?',
    },
  ]);

  const handleOnSend = () => {
    if (!inputValue) return;
    setConversation((prev) => [
      ...prev,
      { id: prev.length + 1, user: User.User, text: inputValue },
    ]);
    setInputValue('');
  };

  const handleSummaryOnClick = () => {
    setConversation((prev) => [
      ...prev,
      { id: prev.length + 1, user: User.User, text: "Can you summarize this article?" },
    ]);
  };

  const handleHighlightsOnClick = () => {
    setConversation((prev) => [
      ...prev,
      { id: prev.length + 1, user: User.User, text: "Can you show me 3 of the main highlights on this article?" },
    ]);
  };

  return (
    <div className="flex flex-col h-full w-full">
      <header className="flex items-center justify-between p-4 border-b">
        <h1 className="text-2xl font-bold">Hub Companion</h1>
        <div className="flex items-center gap-4">
          <Button
            className="text-[rgb(206,0,88)] border-[rgb(206,0,88)] hover:bg-[rgb(206,0,88)] hover:text-white"
            variant="outline"
            onClick={() => handleSummaryOnClick()}
          >
            Summary
          </Button>
          <Button
            className="text-[rgb(206,0,88)] border-[rgb(206,0,88)] hover:bg-[rgb(206,0,88)] hover:text-white"
            variant="outline"
            onClick={() => handleHighlightsOnClick()}
          >
            Highlights
          </Button>
        </div>
      </header>
      <ChatWindow conversation={conversation} setConversation={setConversation} />
      <footer className="p-4 border-t">
        <div className="flex items-center gap-2">
          <Input
            className="flex-1"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Type your message here..."
            type="text"
          />
          <Button
            className="bg-[rgb(206,0,88)] text-white hover:bg-[rgb(186,0,79)]"
            type="submit"
            onClick={() => handleOnSend()}
          >
            Send
          </Button>
        </div>
      </footer>
    </div>
  );
}

  interface ChatWindowProps {
    conversation: Conversation;
    setConversation: Dispatch<SetStateAction<Conversation>>
  }

  function ChatWindow({ conversation, setConversation }: ChatWindowProps) {
    // Ai request and response adder
    useEffect(() => {
      const lastMessage = conversation[conversation.length - 1];
      if (lastMessage.user === User.User) {
        setTimeout(() => {
          setConversation((prev) => [
            ...prev,
            {
              id: prev.length + 1,
              user: User.Assistant,
              text: 'IMPLEMENT REQUEST AND RESPONSE',
            },
          ]);
        }, 1000);
      }
    }, [conversation, setConversation]);

    return (
      <main className="flex-1 overflow-y-auto p-4">
        <div className="flex flex-col gap-4">
          {conversation.map((message) => (
            <ConversationMessage key={message.id} {...message} />
          ))}
        </div>
      </main>
    );
  }

